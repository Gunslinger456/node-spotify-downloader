// Generated by CoffeeScript 1.10.0
(function() {
  var Downloader, Program, config, downloader, getBaseDir;

  require("coffee-script");

  try {
    require('source-map-support').install();
  } catch (undefined) {}

  require("colors");

  Program = require("commander");

  Downloader = require("./lib/downloader");

  getBaseDir = function() {
    return "download";
  };

  Program.version("0.0.1").option("-u, --username [username]", "Spotify Username (required)", null).option("-p, --password [password]", "Spotify Password (required)", null).option("-i, --uri [url / uri]", "Spotify URL / URI (Track / Album / Playlist)", null).option("-d, --directory [directory]", "Download Directory - Default: \"downloads\" folder within the same directory", getBaseDir()).option("-f, --folder", "Save songs in single folder with the playlist name (PLAYLISTS ONLY!)").parse(process.argv);

  config = {
    username: Program.username,
    password: Program.password,
    uri: Program.uri,
    directory: Program.directory,
    folder: Program.folder,
    generate: Program.generate
  };

  if ((config.username == null) || (config.password == null)) {
    console.log("No username / password specified!".red);
    return Program.outputHelp();
  }

  if (config.uri == null) {
    console.log("No URI specified!".red);
    return Program.outputHelp();
  }

  config.uri = config.uri.replace(/^(https?):\/\//, "");

  config.uri = config.uri.replace("play.spotify.com", "spotify").replace(/\//g, ":");

  if (config.uri.indexOf("album") !== -1) {
    config.type = "album";
  } else if (config.uri.indexOf("track") !== -1) {
    config.type = "track";
  } else if (config.uri.indexOf("playlist") !== -1) {
    config.type = "playlist";
  } else if (config.uri === "library") {
    config.type = "library";
  } else {
    console.log("Invalid URI specified!".red);
    return Program.outputHelp();
  }

  downloader = new Downloader(config);

  downloader.run();

}).call(this);

//# sourceMappingURL=main.js.map
