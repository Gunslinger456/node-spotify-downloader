// Generated by CoffeeScript 1.10.0
(function() {
  var Config, app, bodyParser, exec, express, io, root, run, server, sk;

  bodyParser = require('body-parser');

  exec = require('child_process').exec;

  express = require('express');

  app = express();

  server = require('http').Server(app);

  io = require('socket.io')(server);

  require('colors');

  Config = {
    PORT: 3001
  };

  server.listen(Config.PORT, 'localhost', (function(_this) {
    return function() {
      return console.log(("Server running at http://localhost:" + Config.PORT).green);
    };
  })(this));

  app.use('/assets', express["static"](__dirname + '/assets'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  root = (function(_this) {
    return function(req, res) {
      return res.sendFile(__dirname + '/index.html');
    };
  })(this);

  run = (function(_this) {
    return function(req, response) {
      var ls, params;
      params = '';
      params += typeof req.body.username !== 'undefined' ? ' -u ' + req.body.username : '';
      params += typeof req.body.password !== 'undefined' ? ' -p ' + req.body.password : '';
      params += typeof req.body.uri !== 'undefined' ? ' -i ' + req.body.uri : '';
      params += typeof req.body.directory !== 'undefined' && req.body.directory !== '' ? ' -d ' + req.body.directory : '';
      if (typeof req.body.folder !== 'undefined' && typeof req.body.format.trim() !== '') {
        params += ' -f \"' + req.body.format.trim() + '\"';
      } else {
        params += typeof req.body.folder !== 'undefined' ? ' -f ' : '';
      }
      ls = exec("nodejs main.js " + params);
      ls.stdout.on('data', function(data) {
        return sk.emit('progress', {
          progress: data
        });
      });
      ls.stderr.on('data', function(data) {
        if (data.trim().length) {
          console.log(("" + data).red);
        }
        return sk.emit('progress', {
          progress: data
        });
      });
      return ls.on('exit', function(data) {});
    };
  })(this);

  app.get('/', root);

  app.post('/run', run);

  sk = null;

  io.set('origins', '*localhost:' + Config.PORT);

  io.on('connection', (function(_this) {
    return function(socket) {
      sk = socket;
      return socket.on('my other event', function(data) {
        return console.log(data);
      });
    };
  })(this));

}).call(this);

//# sourceMappingURL=server.js.map
